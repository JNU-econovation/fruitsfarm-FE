import React, { useEffect, useState } from 'react';
import '../style/HTwm.css';
import { useLocation } from 'react-router-dom';
import config from '../config';
import { useNavigate } from 'react-router-dom';
import wmwm from '../assets/wmwm.png';

const HTwm = () => {
  const [habitData, setHabitData] = useState(null); //로딩 화면 분기를 위해서
  const [loading, setLoading] = useState(true);

  const { search } = useLocation();
  const params = new URLSearchParams(search);
  const habitTrackerId = params.get('id');

  const navigate = useNavigate();

  useEffect(() => {
    if (!habitTrackerId) {
      alert('다시 시도해주세요.');
      console.log('habitTrackerId가 없습니다.');
      navigate('/main');
      return;
    }

    (async () => {
      try {
        const response = await fetch(
          `${config.serverURL}/api/v1/habit-trackers/${habitTrackerId}`,
          {
            credentials: 'include',
          }
        );

        const result = await response.json();

        if (result.status_code === 401) {
          alert('로그인 후 이용해주세요.');
          navigate('/login');
          return;
        }

        if (result.success) {
          let parsedProgress;
          try {
            parsedProgress =
              typeof result.data.progress === 'string'
                ? JSON.parse(result.data.progress)
                : result.data.progress;
          } catch {
            parsedProgress = [];
          }

          setHabitData({ ...result.data, progress: parsedProgress });
        } else {
          alert(result.error?.message || '데이터를 가져오지 못했습니다.');
        }
      } catch (err) {
        console.error(err);
        alert('오류가 발생했습니다.');
      } finally {
        setLoading(false);
      }
    })();
  }, [habitTrackerId, navigate]);

  const handleToggle = (index) => {
    if (!habitData) return;
    setHabitData((prev) => ({
      ...prev,
      progress: prev.progress.map((v, i) => (i === index ? !v : v)),
    }));
  };

  const handleSave = async () => {
    if (!habitData) return;

    try {
      const response = await fetch(
        `${config.serverURL}/api/v1/habit-trackers/${habitTrackerId}`,
        {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({
            progress: JSON.stringify(habitData.progress),
          }),
        }
      );

      const result = await response.json();
      if (result.success) {
        alert('저장되었습니다!');
      } else {
        alert(result.error?.message || '저장에 실패했습니다.');
      }
    } catch (err) {
      console.error(err);
      alert('오류가 발생했습니다.');
    }
  };

  //로딩처리
  if (loading)
    return <p style={{ textAlign: 'center' }}> 해빗트래커를 불러오는 중…</p>;
  if (!habitData) return <p style={{ textAlign: 'center' }}>데이터 없음</p>;

  const pathList = [
    'M171.117 11.4429C176.153 10.0936 180.805 11.1296 181.509 13.7568C182.213 16.384 178.702 19.6076 173.666 20.9569C168.631 22.3061 163.978 21.2701 163.274 18.6429C162.57 16.0157 166.082 12.7921 171.117 11.4429Z',
    'M150.006 110.639C155.14 111.545 158.919 114.45 158.447 117.128C157.974 119.807 153.43 121.245 148.296 120.339C143.162 119.434 139.383 116.529 139.855 113.85C140.327 111.172 144.872 109.734 150.006 110.639Z',
    'M183.239 81.2287C188.137 83.0117 191.355 86.529 190.424 89.0849C189.494 91.6407 184.769 92.2673 179.87 90.4843C174.971 88.7013 171.754 85.1839 172.684 82.6281C173.615 80.0722 178.34 79.4457 183.239 81.2287Z',
    'M207.295 36.639C212.429 35.7337 216.974 37.1713 217.446 39.8498C217.919 42.5284 214.14 45.4337 209.006 46.3389C203.872 47.2442 199.327 45.8066 198.855 43.128C198.382 40.4495 202.161 37.5442 207.295 36.639Z',
    'M146.006 59.6393C151.14 60.5446 154.919 63.4498 154.447 66.1284C153.974 68.807 149.43 70.2445 144.296 69.3393C139.162 68.434 135.383 65.5288 135.855 62.8502C136.327 60.1716 140.872 58.7341 146.006 59.6393Z',
    'M109.382 161.414C113.652 164.404 115.849 168.634 114.289 170.862C112.729 173.09 108.002 172.473 103.732 169.482C99.4618 166.492 97.2647 162.262 98.8247 160.034C100.385 157.806 105.111 158.424 109.382 161.414Z',
    'M59.6126 215.231C62.9636 219.224 63.991 223.879 61.9074 225.627C59.8239 227.375 55.4183 225.555 52.0674 221.562C48.7165 217.568 47.6891 212.914 49.7726 211.165C51.8562 209.417 56.2617 211.237 59.6126 215.231Z',
    'M104.957 115.118C106.306 120.153 105.27 124.806 102.643 125.51C100.016 126.214 96.7923 122.702 95.443 117.667C94.0938 112.631 95.1298 107.979 97.757 107.275C100.384 106.571 103.608 110.082 104.957 115.118Z',
    'M67.2496 167.175C69.8562 171.689 70.0597 176.452 67.7042 177.812C65.3487 179.172 61.3262 176.614 58.7196 172.099C56.113 167.585 55.9095 162.822 58.265 161.462C60.6205 160.102 64.643 162.66 67.2496 167.175Z',
    'M19.5266 237.94C20.4318 243.074 18.9943 247.619 16.3157 248.091C13.6371 248.563 10.7318 244.784 9.8266 239.65C8.92135 234.516 10.3589 229.972 13.0375 229.499C15.7161 229.027 18.6213 232.806 19.5266 237.94Z',
    'M327.285 245.712C331.722 249.436 333.744 254.331 331.802 256.646C329.859 258.961 324.687 257.819 320.25 254.096C315.813 250.373 313.791 245.478 315.733 243.163C317.676 240.848 322.848 241.989 327.285 245.712Z',
    'M286.664 64.8852C292.435 64.3804 297.326 66.4117 297.589 69.4223C297.853 72.4329 293.388 75.2827 287.618 75.7876C281.848 76.2924 276.956 74.2611 276.693 71.2505C276.43 68.2399 280.894 65.3901 286.664 64.8852Z',
    'M178.033 179.373C177.528 185.143 174.679 189.607 171.668 189.344C168.657 189.08 166.626 184.189 167.131 178.419C167.636 172.648 170.485 168.184 173.496 168.448C176.507 168.711 178.538 173.602 178.033 179.373Z',
    'M60.0889 298.714C60.5937 304.485 58.5624 309.376 55.5518 309.639C52.5412 309.903 49.6914 305.439 49.1866 299.668C48.6817 293.898 50.713 289.007 53.7236 288.743C56.7342 288.48 59.5841 292.944 60.0889 298.714Z',
    'M342.346 59.4034C347.596 61.8514 350.816 66.0562 349.539 68.7952C348.262 71.5341 342.971 71.77 337.721 69.3221C332.472 66.8741 329.251 62.6693 330.528 59.9303C331.806 57.1914 337.097 56.9555 342.346 59.4034Z',
    'M361.032 148.419C361.537 154.189 359.506 159.081 356.495 159.344C353.485 159.607 350.635 155.143 350.13 149.373C349.625 143.603 351.656 138.711 354.667 138.448C357.678 138.184 360.527 142.649 361.032 148.419Z',
    'M126.938 318.054C129.834 323.07 130.06 328.362 127.443 329.873C124.825 331.384 120.356 328.542 117.46 323.526C114.564 318.509 114.337 313.218 116.955 311.707C119.572 310.196 124.041 313.037 126.938 318.054Z',
    'M263.196 237.562C266.519 242.307 267.205 247.559 264.73 249.292C262.254 251.025 257.554 248.584 254.231 243.839C250.909 239.094 250.223 233.843 252.698 232.109C255.174 230.376 259.874 232.817 263.196 237.562Z',
    'M177.567 325.476C180.015 330.726 179.779 336.017 177.04 337.294C174.301 338.572 170.096 335.351 167.648 330.102C165.2 324.852 165.436 319.561 168.175 318.284C170.914 317.006 175.119 320.227 177.567 325.476Z',
    'M338.704 194.971C344.496 194.971 349.192 197.421 349.192 200.443C349.192 203.465 344.496 205.915 338.704 205.915C332.911 205.915 328.216 203.465 328.216 200.443C328.216 197.421 332.911 194.971 338.704 194.971Z',
    'M241.814 154.558C247.257 156.539 250.832 160.447 249.798 163.287C248.765 166.127 243.514 166.823 238.071 164.842C232.628 162.861 229.054 158.953 230.087 156.113C231.121 153.273 236.371 152.577 241.814 154.558Z',
    'M255.371 111.387C259.466 115.483 261.054 120.536 258.917 122.672C256.78 124.809 251.728 123.221 247.632 119.126C243.536 115.03 241.948 109.977 244.085 107.84C246.222 105.703 251.275 107.291 255.371 111.387Z',
    'M291.032 285.373C290.527 291.143 287.678 295.607 284.667 295.344C281.656 295.08 279.625 290.189 280.13 284.419C280.635 278.648 283.485 274.184 286.495 274.448C289.506 274.711 291.537 279.602 291.032 285.373Z',
    'M202.16 277.459C202.16 283.251 199.71 287.947 196.688 287.947C193.666 287.947 191.216 283.251 191.216 277.459C191.216 271.666 193.666 266.971 196.688 266.971C199.71 266.971 202.16 271.666 202.16 277.459Z',
    'M104.16 256.459C104.16 262.251 101.71 266.947 98.6878 266.947C95.6657 266.947 93.2158 262.251 93.2158 256.459C93.2158 250.666 95.6657 245.971 98.6878 245.971C101.71 245.971 104.16 250.666 104.16 256.459Z',
    'M160.16 239.459C160.16 245.251 157.71 249.947 154.688 249.947C151.666 249.947 149.216 245.251 149.216 239.459C149.216 233.666 151.666 228.971 154.688 228.971C157.71 228.971 160.16 233.666 160.16 239.459Z',
    'M284.285 183.712C288.722 187.436 290.744 192.331 288.802 194.646C286.859 196.961 281.687 195.819 277.25 192.096C272.813 188.373 270.791 183.478 272.733 181.163C274.676 178.848 279.848 179.989 284.285 183.712Z',
    'M246.815 311.299C247.821 317.004 246.223 322.053 243.247 322.578C240.271 323.103 237.043 318.904 236.037 313.2C235.031 307.495 236.628 302.446 239.605 301.921C242.581 301.396 245.809 305.595 246.815 311.299Z',
    'M320.501 118.102C322.001 123.697 320.849 128.867 317.93 129.649C315.011 130.431 311.429 126.529 309.93 120.934C308.431 115.339 309.582 110.17 312.501 109.387C315.42 108.605 319.002 112.507 320.501 118.102Z',
    'M212.815 221.299C213.821 227.004 212.223 232.053 209.247 232.578C206.271 233.103 203.043 228.904 202.037 223.2C201.031 217.495 202.628 212.446 205.605 211.921C208.581 211.396 211.809 215.595 212.815 221.299Z',
  ];

  return (
    <div className="main-container-CG">
      <main className="main-content-CG">
        <div className="create-box-CG-wm">
          <h1>수박 습관 기록</h1>
          <div className="HT">
            <div className="HT-Text">
              <h2>Day{habitData.currentDate}</h2>
              <div className="input-box">
                <p>목표</p>
                <div className="text-box">{habitData.achievement}</div>
                <p>동기부여</p>
                <div className="text-box">{habitData.motivation}</div>
                <p>기간</p>
                <div className="date-box">
                  {habitData.startDate} ~ {habitData.endDate}
                </div>
              </div>
            </div>
            <div
              className="HT-Wm"
              style={{ position: 'relative', width: '400px', height: '400px' }}
            >
              <img
                src={wmwm}
                alt="수박"
                style={{ width: '750px', transform: 'translate(-80px, -50px)' }}
              ></img>
              <svg
                width="439"
                height="425"
                viewBox="0 0 439 425"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                style={{
                  position: 'absolute',
                  top: '80px',
                  left: '70px',
                }}
              >
                {pathList.map((d, index) => {
                  const filled = habitData.progress?.[index] === true;
                  return (
                    <path
                      key={index}
                      d={d}
                      fill={filled ? 'black' : 'white'}
                      stroke="black"
                      strokeWidth="0"
                      strokeMiterlimit="0"
                      onClick={() => handleToggle(index)}
                      style={{ cursor: 'pointer' }}
                    />
                  );
                })}
              </svg>
            </div>
            <div className="btn-box">
              <button className="saveBtn" onClick={handleSave}>
                저장
              </button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default HTwm;
